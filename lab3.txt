LUIS CLAUDIO CANTANHEDE MARTINS - 1512946 


QUESTÃO 1) Soma de matrizes
Faça um programa para somar matrizes de acordo com o seguinte algoritmo
O primeiro processo irá criar duas matrizes preenchidas e uma terceira vazia em 3 áreas de memória compartilhada.
O seu programa deverá gerar um processo para o cálculo de cada linha da matriz solução.
O processo pai deve imprimir a matriz solução.
-----------------------------------------------------
lab3_1.c

#include <stdio.h>
#include <stdlib.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>

int main () {
    int i, segmento1, segmento2, segmento3, id, status;
    int * matriz1, * matriz2, * mat3, * bas1, * bas2, * bas3;
    
    // Aloca a memória compartilhada
    segmento1 = shmget(IPC_PRIVATE, 9 * sizeof(int), IPC_CREAT | IPC_EXCL | S_IRUSR |  S_IWUSR);
    segmento2 = shmget(IPC_PRIVATE, 9 * sizeof(int), IPC_CREAT | IPC_EXCL | S_IRUSR |  S_IWUSR);
    segmento3 = shmget(IPC_PRIVATE, 9 * sizeof(int), IPC_CREAT | IPC_EXCL | S_IRUSR |  S_IWUSR);
    
    // associa a memória compartilhada ao processo
    matriz1 = (int *) shmat(segmento1, 0, 0);
    matriz2 = (int *) shmat(segmento2, 0, 0);
    mat3 = (int *) shmat(segmento3, 0, 0);
    
    bas1 = matriz1;
    bas2 = matriz2;
    bas3 = mat3;
    
    for (i = 0; i < 9; i++) {
        *matriz1 = i+1;
        matriz1 += 4;
        
        *matriz2 = i+1;
        matriz2 += 4;
    }
    
    
    matriz1 = bas1;
    matriz2 = bas2;
    
    if ((id = fork()) < 0) { // Processo pai
        puts ("Erro na criação do novo processo");
        exit (-2);
    }
    else if (id == 0) { // Processo filho 1
        for (i = 0; i < 8; i++) {
            *mat3 = *matriz1 + *matriz2;
            matriz2 += 4; //Proximo elemento da "matriz"
            matriz1 += 4; //Proximo elemento da "matriz"
            mat3 += 4;
        }
        id = fork();
        
        if (id == 0) { // Processo filho 2
            for (i = 0; i < 8; i++) {
                *mat3 = *matriz1 + *matriz2;
                matriz2 += 4;
                matriz1 += 4;
                mat3 += 4;
            }
            id = fork();
            
            if (id == 0) { // Processo filho 3
                *mat3 = *matriz1 + *matriz2;
                matriz2 += 4;
                matriz1 += 4;
                mat3 += 4;
                *mat3 = *matriz1 + *matriz2;
                matriz2 += 4;
                matriz1 += 4;
                mat3 += 4;
                *mat3 = *matriz1 + *matriz2;
            }
        }
    }
    else { // Processo pai
        waitpid(-1, &status, 0);
        
        mat3 = bas3;
        printf ("Matriz somada\n");
        
        printf ("%d ", *mat3);
        mat3 += 4;
        printf ("%d ", *mat3);
        mat3 += 4;
        printf ("%d\n", *mat3);
        mat3 += 4;
        printf ("%d ", *mat3);
        mat3 += 4;
        printf ("%d ", *mat3);
        mat3 += 4;
        printf ("%d\n", *mat3);
        mat3 += 4;
        printf ("%d ", *mat3);
        mat3 += 4;
        printf ("%d ", *mat3);
        mat3 += 4;
        printf ("%d\n", *mat3);
    }
    
    // Libera a memória compartilhada das matrizes
    shmdt (matriz1);
    shmdt (matriz2);
    shmdt (mat3);
    
    // Libera a memória compartilhada
    shmctl (segmento1, IPC_RMID, 0);
    shmctl (segmento2, IPC_RMID, 0);
    shmctl (segmento3, IPC_RMID, 0);
    
    return 0;
}

----------------------------------------------------- 
COMPILAÇÃO E EXECUÇÃO

$ gcc -o lab3_1 lab3_1.c
$ ./exercicio1 
----------------------------------------------------- 
RESULTADO

Matriz somada
2 4 6
8 10 12
14 16 18

----------------------------------------------------- 
CONCLUSÃO

Mesmo com mais de um processo, ao compartilhar mémoria pode se fazer tarefas com mais eficiencia e economia. 
-----------------------------------------------------




QUESTÃO 2) Mensagem do Dia
Faça um programa que:
Leia a mensagem do dia do teclado
Crie uma memória compartilhada com a chave 8180
Salve a mensagem na memória
Faça um outro programa que utilize a mesma chave (8180) e exiba a mensagem do dia para o usuário.
-----------------------------------------------------
lab3_2_scanf.c

#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <stdio.h>

int main () {
    int segmento;
    char * mensagem;

    // Aloca a memória compartilhada
    segmento = shmget(8180, 500*sizeof (char), IPC_CREAT | IPC_EXCL | S_IRUSR |  S_IWUSR);
    mensagem = (char*) shmat(segmento, 0, 0);

    printf("Digite a mensagem do dia:\n");
    scanf(" %[^\n]", mensagem);
    
    return 0;
}

-----------------------------------------------------

lab3_2_printf.c

#include <stdio.h>
#include <stdlib.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>

int main () {
    int segmento;
    char * mensagem;

    // Aloca a memória compartilhada
    segmento = shmget (8180, 500 * sizeof(char), IPC_EXCL | S_IRUSR |  S_IWUSR);
    mensagem = (char *) shmat(segmento, 0, 0);

    printf("%s\n", mensagem);

    shmdt(mensagem);
    shmctl(segmento, IPC_RMID, 0);
    
    return 0;
}


----------------------------------------------------- 
COMPILAÇÃO E EXECUÇÃO

$ gcc -o lab3_2_scanf lab3_2_scanf.c
$ ./lab3_2_scanf
$ gcc -o lab3_2_printf lab3_2_printf.c
$ ./lab3_2_printf
----------------------------------------------------- 
RESULTADO

Digite a mensagem do dia:
Bom dia
Bom dia
----------------------------------------------------- 
CONCLUSÃO

Como a memoria eh compartilhada entre dois programas diferentes, basta saber o endereco de memoria para utilizar o mesmo espaco da maneira que quiser.
----------------------------------------------------- 




QUESTÃO 3) Cálculo da matriz transposta
Faça um programa paralelo para achar a transposta de uma matriz.
Crie uma matriz na memória compartilhada e leia dados do teclado para preencher a matriz (4x4)
Crie outra matriz para armazenar a matriz transposta. Gere 4 processos para calcular a transposta
onde cada processo deve transpor uma linha para a respectiva coluna da matriz transposta.
O processo pai deve imprimir a matriz original e a transposta.
-----------------------------------------------------
lab3_3.c

#include <stdio.h>
#include <stdlib.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>

void imprimirMatriz(int * mat);

int main () {
    int i, j, segmento1, segmento2, id, status, aux;
    int * matriz1, * matriz2, * bas1, * bas2;
    
    // Aloca a memória compartilhada
    segmento1 = shmget(IPC_PRIVATE, 16 * sizeof(int), IPC_CREAT | IPC_EXCL | S_IRUSR |  S_IWUSR);
    segmento2 = shmget(IPC_PRIVATE, 16 * sizeof(int), IPC_CREAT | IPC_EXCL | S_IRUSR |  S_IWUSR);
    
    // associa a memória compartilhada ao processo
    matriz1 = (int *) shmat(segmento1, 0, 0);
    matriz2 = (int *) shmat(segmento2, 0, 0);
    
    bas1 = matriz1;
    bas2 = matriz2;
    
    printf("Entre com os numeros da matriz:\n");
    for (i = 0; i < 16; i++) {
        if (i%4 == 0)
            printf("Linha %d: ", i/4 + 1);
        
        scanf(" %d", &aux);
        *matriz1 = aux;
        matriz1 += 4;
    }
    matriz1 = bas1;
    
    if ((id = fork()) < 0) { // Processo pai
        puts ("Erro na criação do novo processo");
        exit (-2);
    }
    else if (id == 0) { // Processo filho 1
        for (i = 0; i < 4; i++) {
            *matriz2 = *matriz1;
            matriz2 += 4;
            matriz1 += 16;
        }
        
        id = fork();
        
        if (id == 0) { // Processo filho 2
            matriz1 = bas1 + 4;
            for (i = 0; i < 4; i++) {
                *matriz2 = *matriz1;
                matriz2 += 4;
                matriz1 += 16;
            }
            
            id = fork();
            
            if (id == 0) { // Processo filho 3
                matriz1 = bas1 + 8;
                for (i = 0; i < 4; i++) {
                    *matriz2 = *matriz1;
                    matriz2 += 4;
                    matriz1 += 16;
                }
                
                id = fork();
                
                if (id == 0) { // Processo filho 4
                    matriz1 = bas1 + 12;
                    for (i = 0; i < 4; i++) {
                        *matriz2 = *matriz1;
                        matriz2 += 4;
                        matriz1 += 16;
                    }
                }
            }
        }
    }
    else { // Processo pai
        sleep(1);
        waitpid(-1, &status, 0);
        
        matriz1 = bas1;
        printf ("\nMatriz:\n");
        imprimirMatriz(matriz1);
        
        matriz2 = bas2;
        printf ("Transposta:\n");
        imprimirMatriz(matriz2);
    }
    
    // Libera a memória compartilhada das matrizes
    shmdt (matriz1);
    shmdt (matriz2);
    
    // Libera a memória compartilhada
    shmctl (segmento1, IPC_RMID, 0);
    shmctl (segmento2, IPC_RMID, 0);
    
    return 0;
}

void imprimirMatriz(int *matriz) 
{
    printf ("%d ", *matriz);
    matriz += 4;
    printf ("%d ", *matriz);
    matriz += 4;
    printf ("%d ", *matriz);
    matriz += 4;
    printf ("%d\n", *matriz);
    matriz += 4;
    printf ("%d ", *matriz);
    matriz += 4;
    printf ("%d ", *matriz);
    matriz += 4;
    printf ("%d ", *matriz);
    matriz += 4;
    printf ("%d\n", *matriz);
    matriz += 4;
    printf ("%d ", *matriz);
    matriz += 4;
    printf ("%d ", *matriz);
    matriz += 4;
    printf ("%d ", *matriz);
    matriz += 4;
    printf ("%d\n", *matriz);
    matriz += 4;
    printf ("%d ", *matriz);
    matriz += 4;
    printf ("%d ", *matriz);
    matriz += 4;
    printf ("%d ", *matriz);
    matriz += 4;
    printf ("%d\n\n", *matriz);
}



----------------------------------------------------- 
COMPILAÇÃO E EXECUÇÃO

$ gcc -o lab3_3 lab3_3.c
$ ./lab3_3

----------------------------------------------------- 
RESULTADO

Entre com os numeros da matriz:
Linha 1: 1 2 3 4
Linha 2: 4 3 2 1
Linha 3: 1 2 3 4
Linha 4: 4 3 2 1

Matriz:
1 2 3 4
4 3 2 1
1 2 3 4
4 3 2 1

Transposta:
1 4 1 4
2 3 2 3
3 2 3 2
4 1 2 1


----------------------------------------------------- 
CONCLUSÃO
Mesmo pricipio da questao 1, porem agora temos que controlar melhor o ponteiro da primeira matriz pois cada processo tem que ir
de linha a linha, e nao de elemento a elemento.
----------------------------------------------------- 